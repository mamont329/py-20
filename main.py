import random
import time


class Hero:
    def __init__(self, name, health=100):
        self.name = name
        self.max_health = health
        self.health = health
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –∑–¥–æ—Ä–æ–≤—å—è (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        self.strong_attack_threshold = 0.5  # 50%
        self.bow_attack_threshold = 0.2  # 20%

        self.base_attacks = {
            "–û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞": (15, 25),
            "–°–∏–ª—å–Ω—ã–π —É–¥–∞—Ä": (20, 30),
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä": (25, 40),
            "–í—ã—Å—Ç—Ä–µ–ª –∏–∑ –ª—É–∫–∞": (10, 35)
        }

    def perform_attack(self):
        attack_name, (min_dmg, max_dmg) = random.choice(list(self.base_attacks.items()))
        current_health_percent = self.health / self.max_health

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –∞—Ç–∞–∫
        if attack_name == "–°–∏–ª—å–Ω—ã–π —É–¥–∞—Ä" and current_health_percent < self.strong_attack_threshold:
            return f"{self.name} –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞–Ω–µ—Å—Ç–∏ {attack_name}, –Ω–æ —Å–ª–∏—à–∫–æ–º –æ—Å–ª–∞–±–µ–ª –∏ –Ω–µ —Å–º–æ–≥ –µ–≥–æ —Å–¥–µ–ª–∞—Ç—å", 0

        if attack_name == "–í—ã—Å—Ç—Ä–µ–ª –∏–∑ –ª—É–∫–∞" and current_health_percent < self.bow_attack_threshold:
            return f"{self.name} –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞—Ç—è–Ω—É—Ç—å –ª—É–∫, –Ω–æ –Ω–µ —Å–º–æ–≥... –ª—É–∫ –≤—ã–ø–∞–ª –∏–∑ —Ä—É–∫", 0

        # –ï—Å–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–µ—Ç - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞
        base_power = random.randint(min_dmg, max_dmg)

        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç –∑–¥–æ—Ä–æ–≤—å—è (—á–µ–º –º–µ–Ω—å—à–µ –∑–¥–æ—Ä–æ–≤—å—è, —Ç–µ–º —Å–ª–∞–±–µ–µ –∞—Ç–∞–∫–∞)
        health_modifier = 0.5 + 0.5 * (self.health / self.max_health)  # –æ—Ç 0.5 –¥–æ 1.0
        final_power = int(base_power * health_modifier)

        return f"{self.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '{attack_name}'", final_power

    def take_damage(self, damage):
        self.health -= damage
        if self.health < 0:
            self.health = 0

    def is_alive(self):
        return self.health > 0

    def get_health_status(self):
        health_percent = self.health / self.max_health * 100
        if health_percent > 70:
            return "‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ"
        elif health_percent > 50:
            return "‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ–µ"
        elif health_percent > 20:
            return "‚ùó –ù–∏–∑–∫–æ–µ"
        else:
            return "‚ò†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ"


class Game:
    def __init__(self):
        player_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –≥–µ—Ä–æ—è: ")
        self.player = Hero(player_name)
        self.computer = Hero("–ö–æ–º–ø—å—é—Ç–µ—Ä")
        self.round_num = 1

    def show_health(self):
        print(f"\n{self.player.name}: {self.player.health} HP ({self.player.get_health_status()})")
        print(f"{self.computer.name}: {self.computer.health} HP ({self.computer.get_health_status()})")
        print("-" * 60)

    def perform_round(self, attacker, defender):
        print(f"\nüåÄ –†–∞—É–Ω–¥ {self.round_num}:")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ç–∞–∫–µ
        attack_message, attack_power = attacker.perform_attack()

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ç–∞–∫–µ
        print(attack_message)
        if attack_power > 0:
            print(f"‚ö° –ù–∞–Ω–æ—Å–∏—Ç {attack_power} —É—Ä–æ–Ω–∞!")
        else:
            print("–ù–∏–∫–∞–∫–æ–≥–æ —É—Ä–æ–Ω–∞!")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
        defender.take_damage(attack_power)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
        self.show_health()
        self.round_num += 1
        time.sleep(1.5)

    def start(self):
        print("\n‚öîÔ∏è" * 10 + " –ë–∏—Ç–≤–∞ –ì–µ—Ä–æ–µ–≤ " + "‚öîÔ∏è" * 10)
        print(f"\n{self.player.name} vs {self.computer.name}")
        print("=" * 60)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –∞—Ç–∞–∫—É–µ—Ç –ø–µ—Ä–≤—ã–º
        current_attacker = self.player if random.choice([True, False]) else self.computer

        while self.player.is_alive() and self.computer.is_alive():
            defender = self.computer if current_attacker == self.player else self.player
            self.perform_round(current_attacker, defender)
            current_attacker = defender

        self.declare_winner()

    def declare_winner(self):
        print("\n" + "=" * 60)
        if self.player.is_alive():
            print(f"üéâ –ü–æ–±–µ–¥–∞! {self.player.name} –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É! üéâ")
            print(f"–û—Å—Ç–∞–ª–æ—Å—å –∑–¥–æ—Ä–æ–≤—å—è: {self.player.health}/{self.player.max_health}")
        else:
            print(f"‚ò†Ô∏è –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! {self.computer.name} –ø–æ–±–µ–¥–∏–ª! ‚ò†Ô∏è")
        print("=" * 60)

    def test_branch2(self):
        ...


if __name__ == "__main__":
    print("üî•" * 10 + " –ë–∏—Ç–≤–∞ –ì–µ—Ä–æ–µ–≤ " + "üî•" * 10)
    while True:
        game = Game()
        game.start()

        play_again = input("\n–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (–¥–∞/–Ω–µ—Ç): ").lower()
        if play_again != '–¥–∞':
            print("\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!")
            break

    def test_branch():
        ...